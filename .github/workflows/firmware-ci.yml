name: Firmware CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'lib/**'
      - 'include/**'
      - 'platformio.ini'
      - '.github/workflows/firmware-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'lib/**'
      - 'include/**'
      - 'platformio.ini'
      - '.github/workflows/firmware-ci.yml'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [lilygo-t3s3]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache PlatformIO
        uses: actions/cache@v3
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Install library dependencies
        run: pio pkg install

      - name: Build firmware for ${{ matrix.environment }}
        run: pio run -e ${{ matrix.environment }}

      - name: Build filesystem (if exists)
        run: |
          if [ -d "data" ]; then
            pio run -e ${{ matrix.environment }} -t buildfs
          fi
        continue-on-error: true

      - name: Run static analysis
        run: pio check -e ${{ matrix.environment }} --skip-packages
        continue-on-error: true

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v3
        with:
          name: firmware-${{ matrix.environment }}
          path: |
            .pio/build/${{ matrix.environment }}/firmware.bin
            .pio/build/${{ matrix.environment }}/firmware.elf
          retention-days: 30

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Install dependencies
        run: pio pkg install

      - name: Check code formatting (if clang-format available)
        run: |
          if command -v clang-format &> /dev/null; then
            find src -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror
          else
            echo "clang-format not available, skipping format check"
          fi
        continue-on-error: true

      - name: Run static analysis
        run: pio check --skip-packages
        continue-on-error: true

      - name: Check for common issues
        run: |
          echo "Checking for common firmware issues..."
          
          # Check for missing includes
          if ! grep -q "#include <Arduino.h>" src/*.cpp; then
            echo "Warning: Arduino.h not included in main files"
          fi
          
          # Check for proper pin definitions
          if ! grep -q "#define.*PIN" src/*.cpp src/*.h; then
            echo "Warning: No pin definitions found"
          fi
          
          # Check for memory management
          if grep -q "malloc\|free\|new\|delete" src/*.cpp; then
            echo "Warning: Dynamic memory allocation detected - consider using static allocation"
          fi

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Security scan for known vulnerabilities
        run: |
          echo "Scanning for potential security issues..."
          
          # Check for hardcoded credentials
          if grep -r -i "password\|secret\|key" src/ --include="*.cpp" --include="*.h" | grep -v "//"; then
            echo "Warning: Potential hardcoded credentials found"
            exit 1
          fi
          
          # Check for debug information in production
          if grep -r "Serial.print\|DEBUG\|printf" src/ --include="*.cpp" --include="*.h"; then
            echo "Info: Debug statements found - ensure they're removed for production"
          fi
          
          # Check for proper WiFi security
          if grep -r "WEP\|OPEN" src/ --include="*.cpp" --include="*.h"; then
            echo "Warning: Insecure WiFi configuration detected"
          fi

  memory-analysis:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Build and analyze memory usage
        run: |
          pio run
          
          # Extract memory information from build output
          if [ -f ".pio/build/lilygo-t3s3/firmware.elf" ]; then
            echo "Memory usage analysis:"
            pio run -t size
            
            # Check if memory usage is reasonable
            FLASH_USAGE=$(pio run -t size | grep "Flash:" | awk '{print $3}' | tr -d '%')
            RAM_USAGE=$(pio run -t size | grep "RAM:" | awk '{print $3}' | tr -d '%')
            
            if [ -n "$FLASH_USAGE" ] && [ "$FLASH_USAGE" -gt 90 ]; then
              echo "Warning: Flash usage is ${FLASH_USAGE}% - consider optimizing"
            fi
            
            if [ -n "$RAM_USAGE" ] && [ "$RAM_USAGE" -gt 80 ]; then
              echo "Warning: RAM usage is ${RAM_USAGE}% - consider optimizing"
            fi
          fi

  release:
    needs: [build-and-test, code-quality]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Build release firmware
        run: pio run

      - name: Create release artifacts
        run: |
          mkdir -p release
          cp .pio/build/lilygo-t3s3/firmware.bin release/cragcrowd-sensor-firmware.bin
          cp .pio/build/lilygo-t3s3/firmware.elf release/cragcrowd-sensor-firmware.elf
          
          # Create version file
          echo "Build Date: $(date)" > release/build-info.txt
          echo "Commit SHA: ${{ github.sha }}" >> release/build-info.txt
          echo "Branch: ${{ github.ref_name }}" >> release/build-info.txt

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cragcrowd-sensor-release
          path: release/
          retention-days: 90